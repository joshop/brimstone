import dagger
import ecs
import enemies
import level
import sprite
import tiles
import defines


volatile byte breakpt @ $6C6 // for debugging

word player_x // player x in level
byte player_y // player y in screen
word vel_x // x velocity, 8.8
word vel_y // y velocity, 8.8
byte sub_x // lower 8 bits of x
byte sub_y // lower 8 bits of y
byte jump_grace // frames left that you can jump
byte controller // controller data
byte debug @$0696 // for debugging
bool gravity_direction // is gravity down or up
byte new_controller // controller data that was pressed this frame
byte player_health // hits left
byte player_lives // lives left
byte player_iframes // number of invulnerability frames (player flashes)
byte attack_held_frames // number of frames attack button held down
byte attack_frames // for tracking the attack cycle
bool player_facing // left or right facing
byte animation_timer // unused for now

// TODO
// - pop out functions in main, nmi and other big ones (oam_list?)
// - make diagonal throws not as powerful (1/sqrt(2))

const byte PPU_NMIENABLE = $80
const byte PPU_EXTSELECT = $40
const byte PPU_SPRITE8 = $00
const byte PPU_SPRITE16 = $20
const byte PPU_BKGNT0 = $00
const byte PPU_BKGNT1 = $10
const byte PPU_SPRNT0 = $00
const byte PPU_SPRNT1 = $08
const byte PPU_HORIZIO = $00
const byte PPU_VERTIO = $04
const byte PPU_NT2000 = $00
const byte PPU_NT2400 = $01
const byte PPU_NT2800 = $02
const byte PPU_NT2C00 = $03

const byte PPU_EMBLUE = $80
const byte PPU_EMGREEN = $40
const byte PPU_EMRED = $20
const byte PPU_SPRITES = $10
const byte PPU_BACKGROUND = $08
const byte PPU_L8SPRITES = $04
const byte PPU_L8BACKGROUND = $02
const byte PPU_GRAYSCALE = $01

const byte CTRLR_A = $80
const byte CTRLR_B = $40
const byte CTRLR_SELECT = $20
const byte CTRLR_START = $10
const byte CTRLR_UP = $08
const byte CTRLR_DOWN = $04
const byte CTRLR_LEFT = $02
const byte CTRLR_RIGHT = $01
const byte CTRLR_DIR = $0f

void main() {
    init_rw_memory()
	ppu_ctrl = PPU_NMIENABLE | PPU_BKGNT0 | PPU_SPRNT1 | PPU_SPRITE8 | PPU_NT2000 // things disabled
	ppu_mask = PPU_L8BACKGROUND | PPU_L8SPRITES
    enemy_count = 0
    effect_count = 0
    read_level_pointers(pointer.word(level0))
    byte i,j,k
    word l
    int24 temp24
    byte temp_val
    bool on_ground
    size_test[0] = 1 // keep it compiled in
    player_palette[0] = $01
    player_palette[1] = $21
    player_palette[2] = $31
    dagger_palette[0] = $01
    dagger_palette[1] = $21
    dagger_palette[2] = $31
    enemy_palette1[0] = $05
    enemy_palette1[1] = $16
    enemy_palette1[2] = $36
    tile_palette1[0] = $10
    tile_palette2[0] = $05
    tile_palette2[1] = $16
    tile_palette3[0] = $17
    tile_palette3[1] = $27
    tile_palette3[2] = $07
    decompress_half_asm(0) // this function takes care of halves_loaded
    decompress_half_asm(1)
    which_slice = 0
    nmitodo = NMI_UPDPAL | NMI_REDRAWFULL // update palette and redraw whole screen
    scroll_x = 0
    player_x = $10
    player_y = $30
    player_health = 6
    player_lives = 3
    player_iframes = 0
    gravity_direction = false // going down
    update_queue_len = 0
    dagger_flags[2] = DAGGER_UNAVAILABLE
    dagger_flags[3] = DAGGER_UNAVAILABLE
    dagger_flags[4] = DAGGER_UNAVAILABLE
    dagger_flags[0] = DAGGER_FREE
    dagger_flags[1] = DAGGER_FREE
    max_subweapons[0] = 2
    max_subweapons[1] = 1
    max_subweapons[2] = 0
    max_subweapons[3] = 0
    ll_slice = -2 // since there's a 2-slice buffer on each end
    while (nmitodo & NMI_FINISHED != 0) { // wait until nmi performed

    }
    while (player_health != 0 && player_y < $f0) { // death conditions: out of hp or falls into a pit
        update_oam_list()
        new_controller = controller
        asm {
            LDA #$01
            STA $4016
            STA controller
            LSR
            STA $4016
controller_loop:
            LDA $4016
            LSR
            ROL controller
            BCC controller_loop
        }
        new_controller = controller & (new_controller ^ $ff) // mask out old bits
        //if (controller & $40 == 0) { // ie not holding attack button
            if (controller & CTRLR_RIGHT != 0) { // left and right motion
                vel_x += $50
            } else if (controller & CTRLR_LEFT != 0) {
                vel_x -= $50
            }
        //}
        if (hi(vel_x) & $80 != 0) { // get the facing set correctly
            player_facing = true
        } else if (vel_x != 0) {
            player_facing = false
        }
        if (controller & CTRLR_A != 0 && jump_grace != 0) { // jumping
            vel_y -= $b0
            if (jump_grace < 7) {
                jump_grace = -10
            }
        }
        on_ground = false // will be set later
        if (subweapon & $f0 != 0) {
            subweapon -= $10 // decrement cooldown by a tick
        } else if (new_controller & CTRLR_SELECT != 0 && subweapon & $f0 == 0) {
            // needs to be off cooldown to fire dagger or swap subweapons
            // check if any daggers are in play or recharging
            // todo: be more graceful here
            // allow switching in cooldown windows
            for i,0,until,5 {
                j = dagger_flags[i] & DAGGER_STATE
                if (j == DAGGER_OUT || j == DAGGER_RECHARGE) {
                    goto subweapon_inuse
                }
            }
            do {
                subweapon += 1
                // change from 4 when more subweapons added
                if (subweapon == 4) {
                    subweapon = 0
                    break
                }
            } while (max_subweapons[subweapon] == 0)
            j = max_subweapons[subweapon]
            for i,0,until,5 {
                if (i < j) {
                    dagger_flags[i] = DAGGER_FREE
                } else {
                    dagger_flags[i] = DAGGER_UNAVAILABLE
                }
                dagger_times[i] = $00
            }
            subweapon |= $f0 // re-add cooldown
        }
        label subweapon_inuse
        if ((new_controller & CTRLR_B != 0 && controller & (CTRLR_DIR) != 0) && subweapon & $f0 == 0) {
            // attempt to spawn dagger
            for i,0,until,5 {
                if (dagger_flags[i] & DAGGER_STATE == DAGGER_FREE) {
                    break
                }
            }
            if (i != 5) {
                // spawn dagger #i
                j = DAGGER_OUT
                if (controller & CTRLR_LEFT != 0) {
                    j |= DAGGER_LEFTXVEL
                } else if (controller & CTRLR_RIGHT != 0) {
                    j |= DAGGER_RIGHTXVEL
                }
                dagger_flags[i] = j | (subweapon & $0f)
                dagger_xs[i] = player_x
                dagger_ys[i] = player_y
                // 4 pixels/frame
                if (controller & CTRLR_UP != 0) {
                    j = -$30
                } else if (controller & CTRLR_DOWN != 0) {
                    j = $30
                } else {
                    j = $00
                }
                dagger_yvels[i] = j
                dagger_times[i] = 0
            }
        }
        for i,0,until,5 {
            if (dagger_flags[i] & DAGGER_STATE == DAGGER_RECHARGE) {
                dagger_times[i] -= 1
                if (dagger_times[i] == 0) {
                    dagger_flags[i] = dagger_flags[i] & ($ff ^ DAGGER_STATE)
                }
            } else if (dagger_flags[i] & DAGGER_STATE == DAGGER_OUT) {
                step_dagger(i)
            }
            
        }
        temp24.hiword = player_x // code for adding velocity to position
        temp24.loword.lo = sub_x
        if (vel_x > $7fff) {
            temp24.hiword.hi += $ff
        }
        temp24 += vel_x
        player_x = temp24.hiword
        sub_x = temp24.loword.lo
        j = 0
        k = 0
        level_idx.hi = 0
        if (vel_x != 0) {
            //level_idx = (lo(player_x >> 4) & $1f) | (word(player_y & $f0) << 1) // index in level shadow where tile is found
            find_level_idx(player_x, player_y, level_idx)
            if (hi(vel_x) & $80 == 0) { // moving to right, so offset one to the right
                if (level_idx & 31 == 31) {
                    level_idx -= 32
                }
                level_idx += 1
            }
            // CLC needed to circumvent compiler bug
            asm {
                CLC
            }
            if (solidity[level_shadow[level_idx]] || (player_y & $0f != 0 && solidity[level_shadow[level_idx+32]])) { // collision detect
                k += 1
            }
        }
        if (k != 0) { // collision
            if (hi(vel_x) & $80 != 0) {
                player_x += 16
            }
            player_x.lo &= $f0 // snap
            vel_x = 0
            if (level_shadow[level_idx] == 4) { // spikes that kill you
                player_health = 0
            }
        }
        temp24.loword.hi = player_y // add vely to y pos
        temp24.loword.lo = sub_y
        temp24.loword += vel_y // 16-bit math
        player_y = temp24.loword.hi
        sub_y = temp24.loword.lo
        //level_idx = (lo(player_x >> 4) & $1f) | (word(player_y & $f0) << 1)
        j = 0
        k = 0
        level_idx.hi = 0
        find_level_idx(player_x, player_y, level_idx)
        if (vel_y != 0) {
            asm {
                CLC
            }
            if (hi(vel_y) & $80 == 0) {
                level_idx += 32
            }
            if (level_idx & 31 == 31) { // handle wrapping
                j = level_shadow[level_idx - 31]
            } else {
                j = level_shadow[level_idx + 1]
            }
            if (solidity[level_shadow[level_idx]] || (player_x & $0f != 0 && solidity[j])) {
                k += 1
            }
        }
        if (k != 0) { // collision
            if (hi(vel_y) & $80 != 0) { // hit from above, not on ground
                player_y += 16
                jump_grace = 0
            } else {
                on_ground = true
            }
            player_y &= $f0 // snap
            vel_y = 0
        } else if (solidity[level_shadow[level_idx]]) { // if on ground, replenish stuff (originally had +32)
            on_ground = true
        }
        if (on_ground) {
            jump_grace = 7 // can jump and dash again
            if (level_shadow[level_idx] == 4 || (player_x & $0f != 0 && j == 4)) { // spikes that kill you
                player_health = 0
            }
        }
        if (jump_grace != 0) { // don't ask me how this works, it handles jumping for different heights
            if (jump_grace > 7) {
                if (controller & $80 == 0) {
                    jump_grace = 0
                } else {
                    jump_grace += 1
                }
            } else {
                jump_grace -= 1
            }
        }
        if (gravity_direction) { // apply gravity
            vel_y -= $40
        } else {
            vel_y += $40
        }
        if (vel_x > 0) { // apply drag/friction
            if (hi(vel_x) & $80 != 0) {
                if (vel_x >> 2 == $4fff) {
                    vel_x += 1
                } else {
                    vel_x -= vel_x >> 2
                    vel_x.hi -= $c0
                }
            } else {
                if (vel_x >> 2 == 0) {
                    vel_x -= 1
                } else {
                    vel_x -= vel_x >> 2
                }
            }
        }
        if (player_x - scroll_x < $60) { // scroll forwards 60
            scroll_x = player_x - $60
        } else if (player_x - scroll_x > $a0) { // backwards // a0
            scroll_x = player_x - $a0
        }
        if (hi(scroll_x) & $80 != 0) { // no scrolling off the left edge 
            scroll_x = 0
        }
        if (hi(scroll_x) >= $07) { // or the right edge
            scroll_x = $0700
        }
        i = 0
        while (i < enemy_count) {
            j = hi(player_x-enemy_xs[i]) // to find if it's too far to stay loaded
            if (enemy_healths[i] == 0 || enemy_healths[i] & $80 != 0 || enemy_ys[i] >= $f0 || (j != 0 && j != $ff)) { // || hi(player_x-enemy_xs[i]) != 0 && hi(player_x-enemy_xs[i]) != $ff
                if (enemy_healths[i] == 0 && enemy_flags[enemy_types[i]] & $20 == 0) {
                    create_effect($80, enemy_xs[i], enemy_ys[i], $20, 0) // enemy dying from damage
                }
                destroy_enemy(i)
                i += 1
            //} else if (hi(player_x-enemy_xs[i]) == 0 || hi(player_x-enemy_xs[i]) == $ff) {
            //    i += 1
            } else {
                i += 1 // next enemy, don't increment otherwise
            }
        }
        for i,0,until,enemy_count {
            j = enemy_types[i] //  && controller & $20 != 0
            //if (enemy_flags[j] & $80 != 0 && (hi(scroll_x-enemy_xs[i]) == 0 || hi(scroll_x-enemy_xs[i]) == $ff)) {
            if (enemy_flags[j] & ENEMY_HAS_AI != 0) {
                call(enemy_funcs[j], i) // run enemy ai
            }
            // todo: see if i can get it done better in general
            // compiler's broken so i gotta use inline asm
            // this code finds difference in Xs and stores in l
            //asm {
            //    LDA main$i
            //    ASL
            //    TAY
            //    LDA player_x
            //    SEC
            //    SBC $A8, Y
            //    STA $EB
            //    LDA player_x + 1
            //    SBC $A9, Y
            //    STA $EC
            //}
            l = player_x-enemy_xs[i]
            if ((hi(l) == $ff && lo(l) > $f0) || (hi(l) == 0 && lo(l) < (enemy_hitboxes[j] & $f0) >> 1)) {
                if (player_y - enemy_ys[i] > sbyte(-16) && (player_y - enemy_ys[i]) < sbyte((enemy_hitboxes[j] & $0f) << 3)) {
                    if (enemy_flags[j] & ENEMY_HAS_COLLISION != 0) {
                        call(enemy_cfuncs[j], i) // collision
                    }
                }
            }
        }
        i = 0
        while (i < effect_count) {
            effect_timers[i] -= 1
            if (effect_timers[i] == 0) {
                destroy_effect(i)
            } else {
                i += 1
            }
        }
        i = (hi(scroll_x + 32) << 1) // the 32 is here for testing and debug
        // actually, it's necessary
        // todo: this might be highly inefficient
        if (lo(scroll_x + 32) & $80 != 0) {
            i |= 1
        }
        if (halves_loaded[(i + 2) & 3] != i + 2) { // if the right half is the wrong one
            decompress_half_asm(i + 2)
            if (i == 0) {
                nmitodo |= NMI_REDRAWR // and gotta redraw it if we're at the very start
            }
        } else if (i != 0 && halves_loaded[(i - 1) & 3] != i - 1) { // what abt the left half
            decompress_half_asm(i - 1)
        }
        i = lo(scroll_x >> 4) - ll_slice // todo fix this shit
        // also sign stuff
        if (i > 2) { // if we need to draw one of the slices
            nmitodo |= NMI_REDRAWR
        } else if (i != 2) {
            nmitodo |= NMI_REDRAWL
        }
        animation_timer += 1
        nmitodo |= NMI_FINISHED // nmi needs to be done
        while ((nmitodo & NMI_FINISHED) != 0) {} // wait until nmi done
    }
    for i,0,until,32 { // wait some frames
        nmitodo |= NMI_FINISHED
        while ((nmitodo & NMI_FINISHED) != 0) {} // wait until nmi done
    }
    // reset in software
    asm {
        JMP ($FFFC)
    }
}

void irq() {

}

segment(chrrom) const array tiles@$0000 = file("bank0.chr")
