array oam[256]@$0200 // oam shadow
byte oam_index // current writing oam index

const byte SPRITE_HFLIP = $40
const byte SPRITE_VFLIP = $80
const byte META_HFLIP = $80

void draw_metasprite(byte x, byte y, byte type, byte flip) {
    pointer metasprite
    byte count
    byte i
    asm {
        DEC y
        LDA type
        BPL metasprite_no_literal
        LDX oam_index
        LDA y
        STA oam,X
        LDA type
        AND #$7f
        STA oam+1,X
        LDA flip
        STA oam+2,X
        LDA x
        STA oam+3,X
        TXA
        CLC
        ADC #$04
        STA oam_index
        RTS
    metasprite_no_literal:
        ASL
        TAY
        LDA (metaspritedata),Y
        STA metasprite.lo
        INY
        LDA (metaspritedata),Y
        STA metasprite.hi
        LDY #$00
        LDA (metasprite),Y
        STA count
        INY
        LDX oam_index
    metasprite_loop:
        LDA x
        BIT flip
        BVC metasprite_nohflip
        SEC
        SBC (metasprite),Y
        BCC metasprite_skip
        STA oam+3,X
        BCS metasprite_hflip
    metasprite_nohflip:
        CLC
        ADC (metasprite),Y
        BCS metasprite_skip
        STA oam+3,X
    metasprite_hflip:
        INY
        LDA y
        BIT flip
        BPL metasprite_novflip
        SEC
        SBC (metasprite),Y
        STA oam,X
        JMP metasprite_vflip
    metasprite_novflip:
        CLC
        ADC (metasprite),Y
        STA oam,X
    metasprite_vflip:
        INY
        LDA (metasprite),Y
        STA oam+1,X
        INY
        LDA (metasprite),Y
        EOR flip
        STA oam+2,X
        INY
        TXA
        CLC
        ADC #$04
        TAX
        DEC count
        BNE metasprite_loop
        STX oam_index
        RTS
    metasprite_skip:
        TXA
        AND #$fc
        TAX
        TYA
        AND #$fc
        CLC
        ADC #$04
        TAY
        JMP metasprite_loop
    }
}

const byte OAM_UNUSED = $ff

void update_oam_list() { // draw all metasprites to oam
    byte i,j,k,l
    byte origin
    word g
    origin = oam_index
    // find player sprite
    if (jump_grace != 6) {
        // in-air
        j = 3
    } else if (vel_x == 0) {
        // standing still
        j = 0
    } else if (lo(player_x) & $4 == 0) {
        // walk cycle 1
        j = 1
    } else {
        // walk cycle 2
        j = 2
    }
    if (player_iframes & 1 == 0) {
        if (player_facing) {
            draw_metasprite(lo(player_x - scroll_x) + 8, player_y, j, SPRITE_HFLIP)
        } else {
            draw_metasprite(lo(player_x - scroll_x), player_y, j, 0)
        }
    }
    if (player_iframes != 0) {
        player_iframes -= 1
    }
    for i,0,until,5 {
        j = (dagger_times[i] >> 2) & 3
        if (dagger_flags[i] & DAGGER_STATE != DAGGER_UNAVAILABLE) {
            if (dagger_flags[i] & DAGGER_DOWN != $00) {
                k = $9e + (dagger_times[i] >> 6)
                j = 0
            } else {
                k = $9c
            }
            // todo: this could probably use a touch-up
            // this code handles the "shift-up/down" animation when you switch
            // gets remaining time, shift, absolute value
            l = (subweapon >> 3) - 16
            if (l & NEGATIVE != 0) {
                l = -l
            }
            // dagger palette
            draw_metasprite((i + 1) << 3, l, k, dagger_anim[j] | 1)
        }
        if (dagger_flags[i] & DAGGER_STATE != DAGGER_OUT) {
            continue
        }
        // dagger spin cycle
        // 00 -> 00
        // 01 -> 10
        // 10 -> 11
        // 11 -> 01
        draw_metasprite(lo(dagger_xs[i] - scroll_x), dagger_ys[i], $9c, dagger_anim[j] | 1)
    }
    // todo: optimize player health code
    if (player_health == 1) {
        draw_metasprite(8, 24, $a3, $01)
        draw_metasprite(16, 24, $a4, $01)
        draw_metasprite(24, 24, $a4, $01)
    } else {
        draw_metasprite(8, 24, $a2, $01)
        if (player_health == 2) {
            draw_metasprite(16, 24, $a4, $01)
            draw_metasprite(24, 24, $a4, $01)
        } else if (player_health == 3) {
            draw_metasprite(16, 24, $a3, $01)
            draw_metasprite(24, 24, $a4, $01)
        } else {
            draw_metasprite(16, 24, $a2, $01)
            if (player_health == 4) {
                draw_metasprite(24, 24, $a4, $01)
            } else if (player_health == 5) {
                draw_metasprite(24, 24, $a3, $01)
            } else {
                draw_metasprite(24, 24, $a2, $01)
            }
        }
    }
    draw_metasprite(40, 24, 30, $00)
    draw_metasprite(54, 24, $9d + player_lives, $01)
    for i,0,until,enemy_count {
        if (enemy_data2[i] & META_HFLIP != 0) {
            j = 8
        } else {
            j = 0
        }
        // todo: ok this is getting ridiculous
        // figure out what the problem with subtraction is
        //asm {
        //    LDA update_oam_list$i
        //    ASL
        //    TAY
        //    LDA $A8, Y
        //    SEC
        //    SBC $18
        //    STA $EB
        //    LDA $A9, Y
        //    SBC $19
        //    STA $EC
        //}
        //g += j
         g = enemy_xs[i]-scroll_x+j
        if (hi(g) == 0 && enemy_flags[enemy_types[i]] & ENEMY_INVISIBLE == 0) {
            draw_metasprite(lo(g), enemy_ys[i], get_metasprite(i), (enemy_data2[i] & META_HFLIP) >> 1)
        }
    }
    for i,0,until,effect_count {
        breakpt += 1
        //asm {
        //    LDA update_oam_list$i
        //    ASL
        //    TAY
        //    LDA $596, Y
        //    SEC
        //    SBC $18
        //    STA $EB
        //    LDA $597, Y
        //    SBC $19
        //    STA $EC
        //}
        g = effect_xs[i]-scroll_x
        //g.hi = 0
        if (hi(g) == 0 && (effect_flags[i] & EFFECT_BLINK == 0 || effect_timers[i] & $01 != 0)) {
            if (effect_flags[i] & EFFECT_MODE != EFFECT_STATIC) {
                j = effect_timers[i] >> (effect_flags[i] & EFFECT_PERIOD)
                if (effect_flags[i] & EFFECT_MODE == EFFECT_CYCLE2) {
                    j &= $03
                } else if (effect_flags[i] & EFFECT_4ORANIM != 0) { // this WAS a $08, let's see what happens
                    j &= $07
                }
            } else {
                j = 0
            }
            draw_metasprite(lo(g), effect_ys[i], effect_sprites[i] + j, effect_flags[i] & EFFECT_FLIP)
        }
    }
    while (oam_index != origin) { // fill unused sprites with ff in y
        origin -= 4
        oam[origin] = OAM_UNUSED
    }
}